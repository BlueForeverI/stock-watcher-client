@page "/stocks"
@inject StocksService stocksService
@inject StateService state

<h3>Stocks</h3>

<EditForm Model="this" OnSubmit="@FilterStocks">
    <div class="form-group d-flex flex-row">
        <InputText class="form-control mr-2" @bind-Value="@searchValue"></InputText>
        <button class="btn btn-primary" type="submit">Filter</button>
    </div>
</EditForm>

@if (loading)
{
    <div class="spinner-border text-primary"></div>
}
else if (stocks != null && stocks.Count == 0) {
    <p>No stocks found</p>
} 
else
{
    <MatTable Items="@stocks" Class="mat-elevation-z5">
        <MatTableHeader>
            <th>Symbol</th>
            <th style="width: 60%">Name</th>
            <th>Action</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Symbol</td>
            <td>@context.Name</td>
            <td>
                <button class="btn btn-outline-primary oi oi-plus font-weight-bold"
                        @onclick="@(() => AddStock(context.ID))"></button>
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private bool loading;
    private List<Stock> stocks;
    private string searchValue;

    protected override async Task OnInitializedAsync()
    {
        this.loading = true;
        this.stocks = await this.stocksService.GetStocks();
        this.loading = false;
    }

    private async void AddStock(int stockId)
    {
        this.loading = true;
        await this.stocksService.AddStock(stockId, this.state.LoggedUser.ID);
        this.stocks = await this.stocksService.GetStocks();
        this.loading = false;
        this.StateHasChanged();
    }

    private async void FilterStocks()
    {
        this.loading = true;
        this.stocks = await this.stocksService.FindStocks(this.searchValue);
        this.loading = false;
        this.StateHasChanged();
    }
}
